'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.createJWT = createJWT;
exports.verifyJWT = verifyJWT;

var _jsontokens = require('jsontokens');

var _mnid = require('mnid');

var JOSE_HEADER = { typ: 'JWT', alg: 'ES256K' };

function createJWT(_ref, payload) {
  var address = _ref.address,
      signer = _ref.signer;

  var signingInput = (0, _jsontokens.createUnsignedToken)(JOSE_HEADER, _extends({}, payload, { iss: address, iat: new Date().getTime() }));
  return new Promise(function (resolve, reject) {
    if (!signer) return reject(new Error('No Signer functionality has been configured'));
    if (!address) return reject(new Error('No application identity address has been configured'));
    return signer(signingInput, function (error, signature) {
      if (error) return reject(error);
      resolve([signingInput, signature].join('.'));
    });
  });
}

function verifyJWT(_ref2, jwt) {
  var registry = _ref2.registry,
      address = _ref2.address;
  var callbackUrl = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  return new Promise(function (resolve, reject) {
    var _decodeToken = (0, _jsontokens.decodeToken)(jwt),
        payload = _decodeToken.payload;

    registry(payload.iss).then(function (profile) {
      if (!profile) return reject(new Error('No profile found, unable to verify JWT'));
      var publicKey = profile.publicKey.match(/^0x/) ? profile.publicKey.slice(2) : profile.publicKey;
      var verifier = new _jsontokens.TokenVerifier('ES256K', publicKey);
      if (verifier.verify(jwt)) {
        if (payload.exp && payload.exp <= new Date().getTime()) {
          return reject(new Error('JWT has expired'));
        }
        if (payload.aud) {
          if (payload.aud.match(/^0x[0-9a-fA-F]+$/) || (0, _mnid.isMNID)(payload.aud)) {
            if (!address) {
              return reject(new Error('JWT audience is required but your app address has not been configured'));
            }

            var addressHex = (0, _mnid.isMNID)(address) ? (0, _mnid.decode)(address).address : address;
            var audHex = (0, _mnid.isMNID)(payload.aud) ? (0, _mnid.decode)(payload.aud).address : payload.aud;
            if (audHex !== addressHex) {
              return reject(new Error('JWT audience does not match your address'));
            }
          } else {
            if (!callbackUrl) {
              return reject(new Error('JWT audience matching your callback url is required but one wasn\'t passed in'));
            }
            if (payload.aud !== callbackUrl) {
              return reject(new Error('JWT audience does not match the callback url'));
            }
          }
        }
        resolve({ payload: payload, profile: profile, jwt: jwt });
      } else {
        return reject(new Error('Signature invalid for JWT'));
      }
    }).catch(reject);
  });
}